module Playlists.View exposing (..)

import Color
import Color.Convert
import Html exposing (..)
import Html.Attributes exposing (rel, style)
import Html.Events exposing (onClick)
import Html.Keyed
import Html.Lazy exposing (..)
import Material.Icons.Content as Icons
import Material.Icons.File as Icons
import Material.Icons.Navigation as Icons
import Material.Icons.Social as Icons
import Navigation.View as Navigation
import Playlists.Types as Playlists exposing (..)
import Routing.Types
import Tracks.Types
import Types as TopLevel exposing (Msg(..))
import Utils exposing (cssClass)
import Variables exposing (colorDerivatives, colors)


-- Styles

import List.Styles exposing (Classes(..))
import Styles exposing (Classes(..))


-- 🍯


entry : Playlists.Page -> TopLevel.Model -> Html TopLevel.Msg
entry page model =
    case page of
        Index ->
            lazy2
                pageIndex
                model.playlists.collection
                model.tracks.selectedPlaylist

        New ->
            text ""



-- {Page} index


pageIndex : List Playlist -> Maybe Playlist -> Html TopLevel.Msg
pageIndex playlists maybeSelectedPlaylist =
    div
        [ cssClass InsulationContent ]
        [ ------------------------------------
          -- Navigation
          ------------------------------------
          Navigation.insideCustom
            [ ( Icons.arrow_back colorDerivatives.text 16
              , Routing.Types.Index
                    |> Routing.Types.GoToPage
                    |> RoutingMsg
              )
            ]

        ------------------------------------
        -- List
        ------------------------------------
        , div
            [ cssClass ContentBox ]
            [ h1
                []
                [ text "Playlists" ]

            -- Lists
            --
            , let
                ( autoGeneratedPlaylists, yourPlaylists ) =
                    playlists
                        |> List.sortBy .name
                        |> List.partition .autoGenerated

                render =
                    renderPlaylist maybeSelectedPlaylist
              in
                div
                    []
                    [ h4
                        []
                        [ Icons.person_outline colorDerivatives.text 16
                        , text "Your playlists"
                        ]
                    , Html.Keyed.node
                        "ul"
                        [ cssClass ListWithActions ]
                        (List.indexedMap render yourPlaylists)
                    , h4
                        []
                        [ Icons.folder_open colorDerivatives.text 16
                        , text "Autogenerated directory playlists"
                        ]
                    , Html.Keyed.node
                        "ul"
                        [ cssClass ListWithActions ]
                        (List.indexedMap render autoGeneratedPlaylists)
                    ]
            ]
        ]


renderPlaylist : Maybe Playlist -> Int -> Playlist -> ( String, Html TopLevel.Msg )
renderPlaylist maybeSelectedPlaylist index playlist =
    let
        isSelected =
            Just playlist == maybeSelectedPlaylist
    in
        ( toString index
        , li
            [ onClick
                (TopLevel.TracksMsg <| Tracks.Types.TogglePlaylist playlist)
            , style
                [ ( "cursor", "pointer" ) ]
            ]
            [ --
              -- Label
              --
              label
                (if isSelected then
                    [ style [ ( "color", Color.Convert.colorToCssRgb colors.base08 ) ] ]
                 else
                    []
                )
                [ text playlist.name ]

            --
            -- Actions
            --
            , span
                [ cssClass ListActions ]
                [ if isSelected then
                    Icons.check colors.base08 16
                  else
                    text ""
                ]
            ]
        )
