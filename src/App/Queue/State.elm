module Queue.State exposing (..)

import List.Extra as List
import Response.Ext exposing (do)
import Queue.Fill as Fill
import Queue.Ports as Ports
import Queue.Types as Types exposing (..)
import Queue.Utils exposing (..)
import Types as TopLevel


-- ðŸ’§


initialModel : Model
initialModel =
    { activeItem = Nothing
    , future = []
    , past = []

    -- Settings
    , repeat = False
    , shuffle = False
    }



-- ðŸ”¥


update : Msg -> Model -> ( Model, Cmd TopLevel.Msg )
update msg model =
    case msg of
        -- # InjectFirst
        -- > Add an item in front of the queue.
        --
        InjectFirst track ->
            let
                item =
                    { manualEntry = True
                    , track = track
                    }

                cleanedFuture =
                    Fill.cleanAutoGenerated model.shuffle track.id model.future
            in
                (!)
                    { model
                        | future = item :: cleanedFuture
                    }
                    [ do TopLevel.FillQueue ]

        -- # InjectLast
        -- > Add an item after the last manual entry
        --   (ie. after the last injected item).
        --
        InjectLast track ->
            let
                item =
                    { manualEntry = True
                    , track = track
                    }

                cleanedFuture =
                    Fill.cleanAutoGenerated model.shuffle track.id model.future

                manualItems =
                    cleanedFuture
                        |> List.filter (.manualEntry >> (==) True)
                        |> List.length
            in
                (!)
                    { model
                        | future =
                            List.concat
                                [ List.take manualItems cleanedFuture
                                , [ item ]
                                , List.drop manualItems cleanedFuture
                                ]
                    }
                    [ do TopLevel.FillQueue ]

        -- # RemoveItem Int
        -- > Remove an item from the queue.
        --
        RemoveItem index ->
            ($)
                { model
                    | future =
                        model.future
                            |> List.removeAt index
                }
                []
                [ do TopLevel.FillQueue ]

        ------------------------------------
        -- Position
        ------------------------------------
        -- # Rewind
        -- > Put the previously played item as the current one.
        --
        Rewind ->
            let
                newActiveItem =
                    List.last model.past

                newModel =
                    { model
                        | activeItem =
                            newActiveItem
                        , future =
                            model.activeItem
                                |> Maybe.map ((flip (::)) model.future)
                                |> Maybe.withDefault model.future
                        , past =
                            model.past
                                |> List.init
                                |> Maybe.withDefault []
                    }
            in
                ($)
                    newModel
                    []
                    [ do (TopLevel.ActiveQueueItemChanged newActiveItem)
                    , do (TopLevel.FillQueue)
                    ]

        -- # Shift
        -- > Put the next item in the queue as the current one.
        --
        Shift ->
            let
                newActiveItem =
                    List.head model.future

                newModel =
                    { model
                        | activeItem =
                            newActiveItem
                        , future =
                            model.future
                                |> List.drop 1
                        , past =
                            model.activeItem
                                |> Maybe.map (List.singleton)
                                |> Maybe.map (List.append model.past)
                                |> Maybe.withDefault model.past
                    }
            in
                ($)
                    newModel
                    []
                    [ do (TopLevel.ActiveQueueItemChanged newActiveItem)
                    , do (TopLevel.FillQueue)
                    ]

        ------------------------------------
        -- Contents
        ------------------------------------
        -- # Fill
        -- > Fill the queue with items.
        --
        Fill timestamp tracks ->
            let
                newFuture =
                    case model.shuffle of
                        False ->
                            Fill.ordered model tracks

                        True ->
                            Fill.shuffled model timestamp tracks
            in
                (!)
                    { model | future = newFuture }
                    []

        -- # Clear
        -- > Clear all future items and then re-fill
        --
        Clear ->
            (!)
                { model | future = [] }
                [ do TopLevel.FillQueue ]

        -- # Clean
        -- > Remove no-longer-existing items from the queue.
        --
        Clean tracks ->
            let
                newPast =
                    List.filter (\i -> List.member i.track tracks) model.past

                newFuture =
                    List.filter (\i -> List.member i.track tracks) model.future
            in
                (!)
                    { model | future = newFuture, past = newPast }
                    [ do TopLevel.FillQueue ]

        -- # Reset
        -- > Renew the queue, meaning that the auto-generated items in the queue
        --   are removed and new items are added.
        --
        Reset ->
            let
                newFuture =
                    List.filter (.manualEntry >> (==) True) model.future
            in
                (!)
                    { model | future = newFuture }
                    [ do TopLevel.FillQueue ]

        ------------------------------------
        -- Combos
        ------------------------------------
        InjectFirstAndPlay track ->
            let
                ( a, b ) =
                    update (InjectFirst track) model

                ( c, d ) =
                    update (Shift) a
            in
                ($) c [] [ b, d ]

        ------------------------------------
        -- Settings
        ------------------------------------
        ToggleRepeat ->
            model
                |> (\m -> { m | repeat = not model.repeat })
                |> (\m -> ($) m [] [ Ports.toggleRepeat m.repeat, do TopLevel.StoreUserData ])

        ToggleShuffle ->
            model
                |> (\m -> { m | shuffle = not model.shuffle })
                |> (\m -> ($) m [ do Reset ] [ do TopLevel.StoreUserData ])



-- ðŸŒ±


subscriptions : Model -> Sub Msg
subscriptions _ =
    Sub.batch
        [ Ports.activeQueueItemEnded (\() -> Shift) ]
